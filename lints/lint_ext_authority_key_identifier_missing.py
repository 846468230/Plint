from lints import base
from cryptography import x509
from cryptography.x509.oid import NameOID,ExtensionOID
from util.time import Time
from util import ca,oid,ev
from datetime import timedelta
'''
RFC 5280: 4.2.1.1
The keyIdentifier field of the authorityKeyIdentifier extension MUST
   be included in all certificates generated by conforming CAs to
   facilitate certification path construction.  There is one exception;
   where a CA distributes its public key in the form of a "self-signed"
   certificate, the authority key identifier MAY be omitted.  The
   signature on a self-signed certificate is generated with the private
   key associated with the certificate's subject public key.  (This
   proves that the issuer possesses both the public and private keys.)
   In this case, the subject and authority key identifiers would be
   identical, but only the subject key identifier is needed for
   certification path building.
'''

class authorityKeyIdMissing(base.LintInterface):
    def Initialize(self):
        return 0

    def CheckApplies(self,c):
        return not ca.IsRootCA(c)
    
    def Execute(self,c):
        try:
            if not ca.IsExtInCert(c,ExtensionOID.AUTHORITY_KEY_IDENTIFIER) and not ca.IsSelfSigned(c):
                return  base.LintResult(base.LintStatus.Error)
            else:
                return  base.LintResult(base.LintStatus.Pass)
        except ValueError:
            return  base.LintResult(base.LintStatus.Fatal)
            


def init():
    base.RegisterLint(base.Lint("e_ext_authority_key_identifier_missing","CAs must support key identifiers and include them in all certificates","RFC 5280: 4.2 & 4.2.1.1",base.LintSource.RFC5280,Time.RFC2459Date,authorityKeyIdMissing()))